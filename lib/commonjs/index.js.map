{"version":3,"sources":["index.tsx"],"names":["getResolvedDimensions","Dimensions","get","width","height","doubleFromPercentString","percent","includes","dbl","parseFloat","isNaN","getKeys","object","Object","keys","SafeAreaView","isMounted","view","React","createRef","state","touchesTop","touchesBottom","touchesLeft","touchesRight","viewWidth","viewHeight","_handleLayout","e","props","onLayout","_updateMeasurements","current","WIDTH","HEIGHT","getNode","measureInWindow","winX","winY","winWidth","winHeight","realY","realX","setState","_getSafeAreaStyle","forceInset","_getViewStyles","paddingTop","paddingBottom","paddingLeft","paddingRight","viewStyle","style","_getInset","forEach","key","inset","Math","max","StyleSheet","flatten","padding","paddingVertical","paddingHorizontal","context","InteractionManager","runAfterInteractions","safeAreaStyle","Component","contextType","SafeAreaContext"],"mappings":"g/BAAA,oDACA,yCASA,0E,+2BAGA,GAAMA,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,qBACRC,wBAAWC,GAAX,CAAe,QAAf,CADQ,CAC1BC,KAD0B,iBAC1BA,KAD0B,CACnBC,MADmB,iBACnBA,MADmB,CAElC,GAAID,KAAK,GAAK,CAAV,EAAeC,MAAM,GAAK,CAA9B,CAAiC,MAAOH,yBAAWC,GAAX,CAAe,QAAf,CAAP,CACjC,MAAO,CAAEC,KAAK,CAALA,KAAF,CAASC,MAAM,CAANA,MAAT,CAAP,CACD,CAJD,CAMA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,OAAD,CAA6B,CAC3D,GAAI,CAACA,OAAO,CAACC,QAAR,CAAiB,GAAjB,CAAL,CAA4B,CAC1B,MAAO,EAAP,CACD,CAED,GAAMC,CAAAA,GAAG,CAAGC,UAAU,CAACH,OAAD,CAAV,CAAsB,GAAlC,CAEA,GAAII,KAAK,CAACF,GAAD,CAAT,CAAgB,MAAO,EAAP,CAEhB,MAAOA,CAAAA,GAAP,CACD,CAVD,CA0CA,QAASG,CAAAA,OAAT,CAA+BC,MAA/B,CAA0D,CACxD,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAP,CACD,C,GAEoBG,CAAAA,Y,0cAMXC,S,CAAqB,K,OACrBC,I,CAAOC,KAAK,CAACC,SAAN,E,OAEfC,K,CAA2B,CACzBC,UAAU,CAAE,IADa,CAEzBC,aAAa,CAAE,IAFU,CAGzBC,WAAW,CAAE,IAHY,CAIzBC,YAAY,CAAE,IAJW,CAKzBC,SAAS,CAAE,CALc,CAMzBC,UAAU,CAAE,CANa,C,OAwC3BC,a,CAAgB,SAACC,CAAD,CAA0B,CACxC,GAAI,MAAKC,KAAL,CAAWC,QAAf,CAAyB,MAAKD,KAAL,CAAWC,QAAX,CAAoBF,CAApB,EAEzB,MAAKG,mBAAL,GACD,C,OAEDA,mB,CAAsB,UAAM,CAC1B,GAAI,CAAC,MAAKf,SAAV,CAAqB,OACrB,GAAI,CAAC,MAAKC,IAAL,CAAUe,OAAf,CAAwB,OAFE,0BAIehC,qBAAqB,EAJpC,CAIXiC,KAJW,uBAIlB9B,KAJkB,CAII+B,MAJJ,uBAIJ9B,MAJI,CAM1B,MAAKa,IAAL,CAAUe,OAAV,CACGG,OADH,GAEGC,eAFH,CAEmB,SAACC,IAAD,CAAOC,IAAP,CAAaC,QAAb,CAAuBC,SAAvB,CAAqC,CACpD,GAAI,CAAC,MAAKvB,IAAV,CAAgB,CACd,OACD,CACD,GAAIwB,CAAAA,KAAK,CAAGH,IAAZ,CACA,GAAII,CAAAA,KAAK,CAAGL,IAAZ,CAEA,GAAII,KAAK,EAAIP,MAAb,CAAqB,CACnBO,KAAK,CAAGA,KAAK,CAAGP,MAAhB,CACD,CAFD,IAEO,IAAIO,KAAK,CAAG,CAAZ,CAAe,CACpBA,KAAK,CAAIA,KAAK,CAAGP,MAAT,CAAmBA,MAA3B,CACD,CAED,GAAIQ,KAAK,EAAIT,KAAb,CAAoB,CAClBS,KAAK,CAAGA,KAAK,CAAGT,KAAhB,CACD,CAFD,IAEO,IAAIS,KAAK,CAAG,CAAZ,CAAe,CACpBA,KAAK,CAAIA,KAAK,CAAGT,KAAT,CAAkBA,KAA1B,CACD,CAED,GAAMZ,CAAAA,UAAU,CAAGoB,KAAK,GAAK,CAA7B,CACA,GAAMnB,CAAAA,aAAa,CAAGmB,KAAK,CAAGD,SAAR,EAAqBN,MAA3C,CACA,GAAMX,CAAAA,WAAW,CAAGmB,KAAK,GAAK,CAA9B,CACA,GAAMlB,CAAAA,YAAY,CAAGkB,KAAK,CAAGH,QAAR,EAAoBN,KAAzC,CAEA,MAAKU,QAAL,CAAc,CACZtB,UAAU,CAAVA,UADY,CAEZC,aAAa,CAAbA,aAFY,CAGZC,WAAW,CAAXA,WAHY,CAIZC,YAAY,CAAZA,YAJY,CAKZC,SAAS,CAAEc,QALC,CAMZb,UAAU,CAAEc,SANA,CAAd,EAQD,CAlCH,EAmCD,C,OAEDI,iB,CAAoB,UAAM,iBACyC,MAAKxB,KAD9C,CAChBC,UADgB,aAChBA,UADgB,CACJC,aADI,aACJA,aADI,CACWC,WADX,aACWA,WADX,CACwBC,YADxB,aACwBA,YADxB,IAEhBqB,CAAAA,UAFgB,CAED,MAAKhB,KAFJ,CAEhBgB,UAFgB,0BAUpB,MAAKC,cAAL,EAVoB,CAKtBC,UALsB,sBAKtBA,UALsB,CAMtBC,aANsB,sBAMtBA,aANsB,CAOtBC,WAPsB,sBAOtBA,WAPsB,CAQtBC,YARsB,sBAQtBA,YARsB,CAStBC,SATsB,sBAStBA,SATsB,CAYxB,GAAMC,CAAAA,KAAK,kBACND,SADM,EAETJ,UAAU,CAAE1B,UAAU,CAAG,MAAKgC,SAAL,CAAe,KAAf,CAAH,CAA2B,CAFxC,CAGTL,aAAa,CAAE1B,aAAa,CAAG,MAAK+B,SAAL,CAAe,QAAf,CAAH,CAA8B,CAHjD,CAITJ,WAAW,CAAE1B,WAAW,CAAG,MAAK8B,SAAL,CAAe,MAAf,CAAH,CAA4B,CAJ3C,CAKTH,YAAY,CAAE1B,YAAY,CAAG,MAAK6B,SAAL,CAAe,OAAf,CAAH,CAA6B,CAL9C,EAAX,CAQA,GAAIR,UAAU,EAAI,MAAOA,CAAAA,UAAP,GAAsB,SAAxC,CAAmD,CACjDlC,OAAO,CAACkC,UAAD,CAAP,CAAoBS,OAApB,CAA4B,SAAAC,GAAG,CAAI,CACjC,GAAIC,CAAAA,KAAK,CAAG,CAAZ,CAEA,GAAIX,UAAU,CAACU,GAAD,CAAV,GAAoB,QAAxB,CAAkC,CAChCC,KAAK,CAAG,MAAKH,SAAL,CAAeE,GAAf,CAAR,CACD,CAFD,IAEO,IAAIV,UAAU,CAACU,GAAD,CAAV,GAAoB,OAAxB,CAAiC,CACtCC,KAAK,CAAG,CAAR,CACD,CAED,OAAQD,GAAR,EACE,IAAK,YAAL,CAAmB,CACjBH,KAAK,CAACH,WAAN,CAAoBO,KAApB,CACAJ,KAAK,CAACF,YAAN,CAAqBM,KAArB,CACA,MACD,CACD,IAAK,UAAL,CAAiB,CACfJ,KAAK,CAACL,UAAN,CAAmBS,KAAnB,CACAJ,KAAK,CAACJ,aAAN,CAAsBQ,KAAtB,CACA,MACD,CACD,IAAK,MAAL,CAAa,CACXJ,KAAK,CAACH,WAAN,CAAoBO,KAApB,CACA,MACD,CACD,IAAK,OAAL,CAAc,CACZJ,KAAK,CAACF,YAAN,CAAqBM,KAArB,CACA,MACD,CACD,IAAK,KAAL,CAAY,CACVJ,KAAK,CAACL,UAAN,CAAmBS,KAAnB,CACA,MACD,CACD,IAAK,QAAL,CAAe,CACbJ,KAAK,CAACJ,aAAN,CAAsBQ,KAAtB,CACA,MACD,CA1BH,CA4BD,CArCD,EAsCD,CAID,GAAIJ,KAAK,CAAChD,MAAN,EAAgB,MAAOgD,CAAAA,KAAK,CAAChD,MAAb,GAAwB,QAA5C,CAAsD,CACpDgD,KAAK,CAAChD,MAAN,EAAgBgD,KAAK,CAACL,UAAN,CAAmBK,KAAK,CAACJ,aAAzC,CACD,CAED,GAAII,KAAK,CAACjD,KAAN,EAAe,MAAOiD,CAAAA,KAAK,CAACjD,KAAb,GAAuB,QAA1C,CAAoD,CAClDiD,KAAK,CAACjD,KAAN,EAAeiD,KAAK,CAACH,WAAN,CAAoBG,KAAK,CAACF,YAAzC,CACD,CAEDE,KAAK,CAACL,UAAN,CAAmBU,IAAI,CAACC,GAAL,CAASN,KAAK,CAACL,UAAf,CAA2BA,UAA3B,CAAnB,CACAK,KAAK,CAACJ,aAAN,CAAsBS,IAAI,CAACC,GAAL,CAASN,KAAK,CAACJ,aAAf,CAA8BA,aAA9B,CAAtB,CACAI,KAAK,CAACH,WAAN,CAAoBQ,IAAI,CAACC,GAAL,CAASN,KAAK,CAACH,WAAf,CAA4BA,WAA5B,CAApB,CACAG,KAAK,CAACF,YAAN,CAAqBO,IAAI,CAACC,GAAL,CAASN,KAAK,CAACF,YAAf,CAA6BA,YAA7B,CAArB,CAEA,MAAOE,CAAAA,KAAP,CACD,C,OAEDN,c,CAAiB,UAAM,IACbrB,CAAAA,SADa,CACC,MAAKL,KADN,CACbK,SADa,yBAaNkC,wBAAWC,OAAX,CAAmB,MAAK/B,KAAL,CAAWuB,KAAX,EAAoB,EAAvC,CAbM,2CAKnBS,OALmB,CAKnBA,OALmB,gCAKT,CALS,kEAMnBC,eANmB,CAMnBA,eANmB,iCAMDD,OANC,mEAOnBE,iBAPmB,CAOnBA,iBAPmB,iCAOCF,OAPD,mEAQnBd,UARmB,CAQnBA,UARmB,iCAQNe,eARM,mEASnBd,aATmB,CASnBA,aATmB,iCASHc,eATG,mEAUnBb,WAVmB,CAUnBA,WAVmB,iCAULc,iBAVK,mEAWnBb,YAXmB,CAWnBA,YAXmB,iCAWJa,iBAXI,wBAYhBZ,SAZgB,wKAerB,GAAI,MAAOJ,CAAAA,UAAP,GAAsB,QAA1B,CAAoC,CAClCA,UAAU,CAAG1C,uBAAuB,CAAC0C,UAAD,CAAvB,CAAsCtB,SAAnD,CACD,CAED,GAAI,MAAOuB,CAAAA,aAAP,GAAyB,QAA7B,CAAuC,CACrCA,aAAa,CAAG3C,uBAAuB,CAAC2C,aAAD,CAAvB,CAAyCvB,SAAzD,CACD,CAED,GAAI,MAAOwB,CAAAA,WAAP,GAAuB,QAA3B,CAAqC,CACnCA,WAAW,CAAG5C,uBAAuB,CAAC4C,WAAD,CAAvB,CAAuCxB,SAArD,CACD,CAED,GAAI,MAAOyB,CAAAA,YAAP,GAAwB,QAA5B,CAAsC,CACpCA,YAAY,CAAG7C,uBAAuB,CAAC6C,YAAD,CAAvB,CAAwCzB,SAAvD,CACD,CAED,MAAO,CACLsB,UAAU,CAAVA,UADK,CAELC,aAAa,CAAbA,aAFK,CAGLC,WAAW,CAAXA,WAHK,CAILC,YAAY,CAAZA,YAJK,CAKLC,SAAS,CAATA,SALK,CAAP,CAOD,C,OAEDE,S,CAAY,SACVE,GADU,CAEP,CACH,MAAO,OAAKS,OAAL,CAAaT,GAAb,CAAP,CACD,C,kHA3MmB,iBAClB,KAAKvC,SAAL,CAAiB,IAAjB,CACAiD,gCAAmBC,oBAAnB,CAAwC,UAAM,CAC5C,MAAI,CAACnC,mBAAL,GACD,CAFD,EAGD,C,mEAEsB,CACrB,KAAKf,SAAL,CAAiB,KAAjB,CACD,C,+DAEoB,CACnB,KAAKe,mBAAL,GACD,C,uCAEQ,iBACyC,KAAKF,KAD9C,mCACCgB,UADD,CACCA,UADD,gCACc,KADd,uBACqBO,KADrB,aACqBA,KADrB,CAC+BvB,KAD/B,2EAGP,GAAMsC,CAAAA,aAAa,CAAG,KAAKvB,iBAAL,EAAtB,CAEA,MACE,qBAAC,qBAAD,CAAU,IAAV,wBACE,GAAG,CAAE,KAAK3B,IADZ,CAEE,aAAa,CAAC,UAFhB,EAGMY,KAHN,EAIE,QAAQ,CAAE,KAAKF,aAJjB,CAKE,KAAK,CAAEwC,aALT,mDADF,CASD,C,0BA/CuCjD,KAAK,CAACkD,S,+BAA3BrD,Y,CAIZsD,W,CAAmBC,2C","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Dimensions,\n  InteractionManager,\n  LayoutChangeEvent,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { SafeAreaContext } from 'react-native-safe-area-context';\n\n// wat\nconst getResolvedDimensions = () => {\n  const { width, height } = Dimensions.get('window');\n  if (width === 0 && height === 0) return Dimensions.get('screen');\n  return { width, height };\n};\n\nconst doubleFromPercentString = (percent: string): number => {\n  if (!percent.includes('%')) {\n    return 0;\n  }\n\n  const dbl = parseFloat(percent) / 100;\n\n  if (isNaN(dbl)) return 0;\n\n  return dbl;\n};\n\nimport { ViewProperties } from 'react-native';\n\nexport type SafeAreaViewForceInsetValue = 'always' | 'never';\n\ninterface SafeAreaViewProps extends ViewProperties {\n  forceInset?:\n    | boolean\n    | {\n        top?: SafeAreaViewForceInsetValue;\n        bottom?: SafeAreaViewForceInsetValue;\n        left?: SafeAreaViewForceInsetValue;\n        right?: SafeAreaViewForceInsetValue;\n        horizontal?: SafeAreaViewForceInsetValue;\n        vertical?: SafeAreaViewForceInsetValue;\n      };\n}\n\ninterface SafeAreaViewState {\n  touchesTop: boolean;\n  touchesBottom: boolean;\n  touchesLeft: boolean;\n  touchesRight: boolean;\n  viewWidth: number;\n  viewHeight: number;\n}\n\ninterface AnimatedView {\n  getNode(): View;\n}\n\nfunction getKeys<T extends {}>(object: T): Array<keyof T> {\n  return Object.keys(object) as Array<keyof T>;\n}\n\nexport default class SafeAreaView extends React.Component<\n  SafeAreaViewProps,\n  SafeAreaViewState\n> {\n  static contextType: any = SafeAreaContext;\n  context!: React.ContextType<typeof SafeAreaContext>;\n  private isMounted: boolean = false;\n  private view = React.createRef<AnimatedView>();\n\n  state: SafeAreaViewState = {\n    touchesTop: true,\n    touchesBottom: true,\n    touchesLeft: true,\n    touchesRight: true,\n    viewWidth: 0,\n    viewHeight: 0,\n  };\n\n  componentDidMount() {\n    this.isMounted = true;\n    InteractionManager.runAfterInteractions(() => {\n      this._updateMeasurements();\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMounted = false;\n  }\n\n  componentDidUpdate() {\n    this._updateMeasurements();\n  }\n\n  render() {\n    const { forceInset = false, style, ...props } = this.props;\n\n    const safeAreaStyle = this._getSafeAreaStyle();\n\n    return (\n      <Animated.View\n        ref={this.view}\n        pointerEvents=\"box-none\"\n        {...props}\n        onLayout={this._handleLayout}\n        style={safeAreaStyle}\n      />\n    );\n  }\n\n  _handleLayout = (e: LayoutChangeEvent) => {\n    if (this.props.onLayout) this.props.onLayout(e);\n\n    this._updateMeasurements();\n  };\n\n  _updateMeasurements = () => {\n    if (!this.isMounted) return;\n    if (!this.view.current) return;\n\n    const { width: WIDTH, height: HEIGHT } = getResolvedDimensions();\n\n    this.view.current\n      .getNode()\n      .measureInWindow((winX, winY, winWidth, winHeight) => {\n        if (!this.view) {\n          return;\n        }\n        let realY = winY;\n        let realX = winX;\n\n        if (realY >= HEIGHT) {\n          realY = realY % HEIGHT;\n        } else if (realY < 0) {\n          realY = (realY % HEIGHT) + HEIGHT;\n        }\n\n        if (realX >= WIDTH) {\n          realX = realX % WIDTH;\n        } else if (realX < 0) {\n          realX = (realX % WIDTH) + WIDTH;\n        }\n\n        const touchesTop = realY === 0;\n        const touchesBottom = realY + winHeight >= HEIGHT;\n        const touchesLeft = realX === 0;\n        const touchesRight = realX + winWidth >= WIDTH;\n\n        this.setState({\n          touchesTop,\n          touchesBottom,\n          touchesLeft,\n          touchesRight,\n          viewWidth: winWidth,\n          viewHeight: winHeight,\n        });\n      });\n  };\n\n  _getSafeAreaStyle = () => {\n    const { touchesTop, touchesBottom, touchesLeft, touchesRight } = this.state;\n    const { forceInset } = this.props;\n\n    const {\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      viewStyle,\n    } = this._getViewStyles();\n\n    const style = {\n      ...viewStyle,\n      paddingTop: touchesTop ? this._getInset('top') : 0,\n      paddingBottom: touchesBottom ? this._getInset('bottom') : 0,\n      paddingLeft: touchesLeft ? this._getInset('left') : 0,\n      paddingRight: touchesRight ? this._getInset('right') : 0,\n    };\n\n    if (forceInset && typeof forceInset !== 'boolean') {\n      getKeys(forceInset).forEach(key => {\n        let inset = 0;\n\n        if (forceInset[key] === 'always') {\n          inset = this._getInset(key);\n        } else if (forceInset[key] === 'never') {\n          inset = 0;\n        }\n\n        switch (key) {\n          case 'horizontal': {\n            style.paddingLeft = inset;\n            style.paddingRight = inset;\n            break;\n          }\n          case 'vertical': {\n            style.paddingTop = inset;\n            style.paddingBottom = inset;\n            break;\n          }\n          case 'left': {\n            style.paddingLeft = inset;\n            break;\n          }\n          case 'right': {\n            style.paddingRight = inset;\n            break;\n          }\n          case 'top': {\n            style.paddingTop = inset;\n            break;\n          }\n          case 'bottom': {\n            style.paddingBottom = inset;\n            break;\n          }\n        }\n      });\n    }\n\n    // new height/width should only include padding from insets\n    // height/width should not be affected by padding from style obj\n    if (style.height && typeof style.height === 'number') {\n      style.height += style.paddingTop + style.paddingBottom;\n    }\n\n    if (style.width && typeof style.width === 'number') {\n      style.width += style.paddingLeft + style.paddingRight;\n    }\n\n    style.paddingTop = Math.max(style.paddingTop, paddingTop);\n    style.paddingBottom = Math.max(style.paddingBottom, paddingBottom);\n    style.paddingLeft = Math.max(style.paddingLeft, paddingLeft);\n    style.paddingRight = Math.max(style.paddingRight, paddingRight);\n\n    return style;\n  };\n\n  _getViewStyles = () => {\n    const { viewWidth } = this.state;\n    // get padding values from style to add back in after insets are determined\n    // default precedence: padding[Side] -> vertical | horizontal -> padding -> 0\n    let {\n      padding = 0,\n      paddingVertical = padding,\n      paddingHorizontal = padding,\n      paddingTop = paddingVertical,\n      paddingBottom = paddingVertical,\n      paddingLeft = paddingHorizontal,\n      paddingRight = paddingHorizontal,\n      ...viewStyle\n    }: ViewStyle = StyleSheet.flatten(this.props.style || {});\n\n    if (typeof paddingTop !== 'number') {\n      paddingTop = doubleFromPercentString(paddingTop) * viewWidth;\n    }\n\n    if (typeof paddingBottom !== 'number') {\n      paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;\n    }\n\n    if (typeof paddingLeft !== 'number') {\n      paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;\n    }\n\n    if (typeof paddingRight !== 'number') {\n      paddingRight = doubleFromPercentString(paddingRight) * viewWidth;\n    }\n\n    return {\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      viewStyle,\n    };\n  };\n\n  _getInset = (\n    key: 'top' | 'left' | 'right' | 'bottom' | 'horizontal' | 'vertical'\n  ) => {\n    return this.context[key];\n  };\n}\n"]}